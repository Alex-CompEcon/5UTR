type: Dataset
args:
    intervals_file:
        doc: bed3+<columns> file path containing bed3 and at least one column specifying the strand. Additional columns are (currently) ignored. Must be sorted
        example:
            url: https://zenodo.org/record/3234762/files/Homo_sapiens_GRCh38_96_chr22.sorted.bed?download=1
            md5: 209a6d06dff83e6cc10b7c450e20988f
    fasta_file:
        doc: Reference genome FASTA file path.
        example: 
            url: https://zenodo.org/record/3234762/files/Homo_sapiens.GRCh38.dna.chromosome.22.fa?download=1
            md5: a52f44ffee7dd3f179f90a764d39b781
    vcf_file:    
        doc: bgzipped vcf file with the variants that are to be investigated. Must be sorted. If tabix index is not present, it will be generated
        example: 
            url: https://zenodo.org/record/3234762/files/ALL.chr22.1000gen.filtered.vcf.gz?download=1
            md5: 834db4a31dbfd2e67032ae69c8292efc
    strand_column:
        doc: the column (1-based) specifying the strand (column 6 in a standard bed file)
    num_chr_fasta:
        doc: if True, the the dataloader will make sure that the chromosomes do not start with chr.

defined_as: dataloader.py::StringSeqIntervalDlWithStrandAndVariants

dependencies:
  conda:
    - bioconda::tabix
    - bioconda::pybedtools=0.8.0
    - numpy>=1.16.2
    - pandas>=0.24.2
  pip:
    - kipoiseq=0.2.4

info:
    doc: >
       Dataloader for a combination of fasta, bgzip compressed vcf and bed3+ input files, where a specific user-sepcified column (>3) of the bed denotes the strand. 
       All columns of the bed3+ except the first three and the strand column are ignored. 
       The bed and vcf must both be sorted (by position).
       If a tabix index for the vcf is not present (must lie in the same directory and have the same name + .tbi), it will be generated (and deleted afterwards).
       The dataloader finds all intervals in the bed3 which contain at least one variant in the vcf, then, for these intervals,
       it extracts the reference sequence from the fasta file, injects the applicable variants and reverse complements according to the strand information.
       Returns the reference sequence and variant sequence as array np.array([reference_sequence, variant_sequence]). 
       Region metadata is additionally provided

output_schema:
    inputs:
        name: seq
        shape: (2,)
        doc: Reference sequence and variant sequence, as string
        associated_metadata: ranges
    # targets:
    #     shape: (None,)
    #     doc: (optional) values following the bed-entry (except for strand column) - chr  start  end  target1   strand target3 ....
    metadata:
        ranges:
            type: GenomicRanges
            doc: Ranges describing inputs.seq